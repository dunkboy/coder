// buildscript中的声明是gradle脚本自身需要使用的资源。可以声明的资源包括依赖项、第三方插件、maven仓库地址等
//+号匹配最新版本号，gretty插件（Advanced gradle plugin for running web-apps on jetty and tomcat）
buildscript {
    repositories { jcenter(); maven { url 'http://repo.spring.io/plugins-release' }; }
//    dependencies { classpath 'org.akhikhl.gretty:gretty:+'; classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'; }
    dependencies {
        classpath 'org.akhikhl.gretty:gretty:+'; classpath 'io.spring.gradle:propdeps-plugin:0.0.10.RELEASE';
    }
}

// 所有工程的设置
allprojects {
    group 'com.four.king.kong'
    version '0.1.RELEASE'
}

// 子工程的设置
subprojects {
    // io.spring.gradle的propdeps插件
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    // eclipse 的插件，执行命令 gradle eclipse 就会生成 .project .classpath .settings
    //apply plugin: 'eclipse'
    apply plugin: 'propdeps-eclipse'
    // idea 的插件，执行命令 gradle idea 就可以导入工程了
    //apply plugin: 'idea'
    apply plugin: 'propdeps-idea'
    // 所有子项目都是 java 项目
    apply plugin: 'java'
    // java 源文件和编译使用版本
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    // 使用的仓库
//    repositories { mavenLocal(); mavenCentral(); jcenter(); }
    repositories {
        //Maven本地资源库
        mavenLocal()
        //阿里云仓库
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        //spring仓库(自带)
        maven { url "https://repo.spring.io/plugins-release" }
        //Maven中央资源库
        mavenCentral()
    }

    ext {
        springVersion = '4.3.5.RELEASE'
        mysqlVersion = '5.1.45'
        mybatisVersion = '3.4.1'
        junitVersion = '4.12'
        jacksonVersion = '2.9.3'
        pagehelperVersion = '5.0.2'
        shiroVersion = '1.3.0'
    }

    // 所有子工程公共的依赖
    dependencies {
        compile("org.slf4j:slf4j-api:1.7.25")
        runtime("org.slf4j:slf4j-log4j12:1.7.25")
        runtime("log4j:log4j:1.2.17")
        provided("javax.servlet:javax.servlet-api:3.1.0")
        testCompile("junit:junit:$junitVersion")
        testCompile("org.springframework:spring-test:$springVersion")
//        runtime files ("../libs/postgresql-8.3-605.jdbc4.jar")
    }

    task mapperXmlCopy(type: Copy) {
        copy {
            from("src/main/java") {
                include("**/mapping/*.xml")
            }
            into("${buildDir}/classes/main")
        }
    }
}

project(':basic') {
    dependencies {
        //spring
        compile("org.springframework:spring-core:$springVersion")
        compile("org.springframework:spring-aop:$springVersion")
        compile("org.springframework:spring-oxm:$springVersion")
        compile("org.springframework:spring-beans:$springVersion")
        compile("org.springframework:spring-context:$springVersion")
        compile("org.springframework:spring-context-support:$springVersion")
        compile("org.springframework:spring-jdbc:$springVersion")
        compile("org.springframework:spring-tx:$springVersion")
        compile("org.springframework:spring-web:$springVersion")
        compile("org.springframework:spring-webmvc:$springVersion")
        //mybatis
        compile("org.mybatis:mybatis:$mybatisVersion")
        compile("org.mybatis:mybatis-spring:1.3.1")
        //ehcache
        compile("org.mybatis.caches:mybatis-ehcache:1.1.0")
        compile("org.ehcache:ehcache:3.0.1")
        //jackson
        compile("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
        compile("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion") {
            exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
        }
        compile("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
        //shiro
        compile("org.apache.shiro:shiro-core:$shiroVersion")
        compile("org.apache.shiro:shiro-web:$shiroVersion")
        compile("org.apache.shiro:shiro-ehcache:$shiroVersion") {
            exclude group: 'net.sf.ehcache', module: 'ehcache-core'
        }
        compile("org.apache.shiro:shiro-spring:$shiroVersion")
        //alibaba
        compile("com.alibaba:fastjson:1.2.44")
        compile("com.alibaba:druid:1.1.6")
        //mysql驱动包
        compile("mysql:mysql-connector-java:$mysqlVersion")
        //pagehelper
        compile("com.github.pagehelper:pagehelper:$pagehelperVersion")
        //commons类
        compile("commons-lang:commons-lang:2.6")
        compile("commons-io:commons-io:2.6")
        compile("commons-codec:commons-codec:1.10")
        compile("commons-fileupload:commons-fileupload:1.3.3")
        //bean-validation
        compile("javax.validation:validation-api:2.0.1.Final")
        compile("org.hibernate.validator:hibernate-validator:6.0.7.Final")
        compile("org.glassfish:javax.el:3.0.1-b08")
        compile("javax.el:javax.el-api:3.0.1-b04")

    }
}

project(':model') {
    dependencies {
        compile project(":basic")
    }
}

// public 工程配置
project(':portal') {
    // 添加 war 插件
    apply plugin: 'war'
    // 添加 jetty 插件，执行命令 gradle jettyRun 就可以 http://127.0.0.1:8080/public/ 访问了
    //apply plugin: 'jetty'
    //apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'
    apply plugin: 'org.akhikhl.gretty'

    dependencies {
        compile project(":basic")
        compile project(":model")
    }

    war {
        //from "${rootProject.projectDir}/basic/src/main/webapp"
        //from "${rootProject.projectDir}/portal/src/main/webapp"
        // 将编译的 classes 打包成 jar 放在 WEB-INF/lib 目录下
        from("${rootProject.projectDir}/basic/src/main/resources/META-INF/basic/basic.properties") {
            into('WEB-INF/classes')
        }
        from("${rootProject.projectDir}/basic/src/main/resources/META-INF/basic/jdbc.properties") {
            into('WEB-INF/classes')
        }
        from("$buildDir/resources/main/META-INF/portal/portal.properties") {
            into('WEB-INF/classes')
        }
        classpath = classpath - sourceSets.main.output
        from(jar) { into 'WEB-INF/lib' }
    }

//http://akhikhl.github.io/gretty-doc/Gretty-configuration.html  gretty配置
    gretty {
        //添加新的资源目录
        extraResourceBases "${rootProject.projectDir}/portal/src/main/webapp"
//        jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000']
        jvmArgs = ['-Xmx256m']
        contextPath = '/'
        servletContainer = 'jetty9'
        debugPort = 6688
        httpPort = 8085
        debugSuspend = false
        recompileOnSourceChange = false//监视源码变动，自动编译（默认为true）
        reloadOnClassChange = false//编译的类发生改变，自动加载（默认为true）
        reloadOnConfigChange = false//WEB-INF或META-INF发生改变，自动加载（默认为true）
        reloadOnLibChange = false//依赖发生改变，自动加载（默认为true）
        managedClassReload = false//Gretty的任务是用spring加载的库来帮助你的web应用程序，这样就可以重新加载编译的类，并避免重新启动servlet容器
        fastReload = false//监听webapp/中的内容，文件发生改变，无需重启（默认为true）
        scanInterval = 0//监视周期，单位为秒，设置为0等于完全关闭热部署
    }
}

task dist(type: Zip, dependsOn: [':basic:jar', ':model:jar', ':portal:jar']) {
    baseName = 'portal'
//	from("basic/build/libs") {  into "WEB-INF/lib" }
}

